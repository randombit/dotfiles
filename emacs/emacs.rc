;; Emacs -*- mode: Lisp -*- code


;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

(setq load-path (cons "~/conf/emacs/" load-path))
;(setq load-path (cons "~/conf/emacs/fsharp-mode" load-path))
;(setq load-path (cons "~/conf/emacs/go-mode.el" load-path))
;(setq load-path (cons "~/conf/emacs/rust-mode" load-path))
;(setq load-path (cons "~/conf/emacs/slime-2.0" load-path))
;(setq load-path (cons "~/conf/emacs/company-mode" load-path))
;(setq load-path (cons "~/conf/emacs/emacs-racer" load-path))

;(load "/sw/tuareg/tuareg-site-file")

(load "/usr/share/emacs/site-lisp" t)
;(load "/usr/share/emacs/site-lisp/site-gentoo" t)

(load "jl-utils")

(setq vc-follow-symlinks t)

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

(require 'eglot)
(add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
(add-hook 'c-mode-hook 'eglot-ensure)
(add-hook 'c++-mode-hook 'eglot-ensure)

(setq inferior-lisp-program
  (first-true 'file-executable-p
              '("/usr/bin/sbcl" "/usr/bin/clisp" "~/opt/bin/sbcl")))

(if (not (null inferior-lisp-program))
  (condition-case err
    (progn
      (require 'slime)
      (slime-setup))
  (error nil)))

(defun maybe-botan-style ()
   (when (and buffer-file-name (string-match "botan" buffer-file-name))
     (c-set-style "botan")))

; From https://www.emacswiki.org/emacs/UnwrapLine
(defun unwrap-line ()
 "Remove all newlines until we get to two consecutive ones.
  Or until we reach the end of the buffer.
  Great for unwrapping quotes before sending them on IRC."
    (interactive)
    (let ((start (point))
          (end (copy-marker (or (search-forward "\n\n" nil t)
                                (point-max))))
          (fill-column (point-max)))
      (fill-region start end)
      (goto-char end)
      (newline)
      (goto-char start)))

;(semantic-mode 1)

;;; Keybindings
(global-set-key "\M-g" 'goto-line)
(global-set-key "\C-x\C-m" 'execute-extended-command)

;;; Disable menus and misc junk
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

;;; Enable some commands
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'erase-buffer 'disabled nil)

;;; Toggles
(setq-default show-trailing-whitespace t)

;(setq track-eol t)

(global-font-lock-mode -1)
(setq eldoc-echo-area-use-multiline-p nil)

(setq-default indent-tabs-mode nil)

(setq vc-handled-backends (remq 'Mtn vc-handled-backends))

(setq default-major-mode 'text-mode)
(setq inhibit-startup-message t)
(setq case-fold-search nil)
(setq auto-save-list-file-prefix "~/var/tmp/emacs/")
(setq make-backup-files nil)
(setq fill-column 80)

(setq display-time-string-forms '(year "-" month "-" day " " 24-hours ":" minutes))
(display-time)

;(require 'company)

;(require 'racer)
;(require 'rust-mode)
;(require 'clojure-mode)
;(require 'go-mode)
;(require 'go-mode-autoloads)

;(autoload 'rust-mode "rust-mode" nil t)
;(add-hook 'rust-mode-hook #'racer-mode)
;(setq racer-cmd "/bin/racer")

;(require 'solidity-mode)

(autoload 'fsharp-mode "fsharp" "Major mode for editing F# code." t)
(autoload 'run-fsharp "inf-fsharp" "Run an inferior F# process." t)

(defun add-mode-alist (match mode)
  (push (cons match mode) auto-mode-alist))

(add-mode-alist "\\.h\\'" 'c++-mode)
(add-mode-alist "\\.cu\\'" 'c++-mode)
(add-mode-alist "\\.go\\'" 'go-mode)
(add-mode-alist "\\.cgi\\'" 'perl-mode)
(add-mode-alist "\\.php\\'" 'html-mode)
(add-mode-alist "\\.cs\\'" 'csharp-mode)
(add-mode-alist "\\.xml\\'" 'text-mode)
(add-mode-alist "\\.fs[iylx]?$" 'fsharp-mode)
;(add-mode-alist "\\.rs\\'" 'rust-mode)
(add-mode-alist "\\.sage\\'" 'python-mode)

(autoload 'fsharp-mode "fsharp" "F# major mode" t)
(autoload 'inferior-fsharp "inf-fsharp" "Inferior F# process" t)

(add-mode-alist "\\.SConscript\\'" 'python-mode)
(add-mode-alist "SConscript" 'python-mode)
(add-mode-alist "SConstruct" 'python-mode)

(setq-default ispell-program-name "aspell")

(load "jl-indent")

(add-hook 'c-mode-common-hook 'set_styles)
(add-hook 'c++-mode-common-hook 'set_styles)
(add-hook 'java-mode-common-hook 'set_styles)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(lsp-ui use-package rustic lsp-mode company flycheck flymake-rust racer))
 '(rst-level-face-base-color "null"))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )


(use-package rustic
  :ensure
  :bind (:map rustic-mode-map
              ("M-j" . lsp-ui-imenu)
              ("M-?" . lsp-find-references)
              ("C-c C-c l" . flycheck-list-errors)
              ("C-c C-c a" . lsp-execute-code-action)
              ("C-c C-c r" . lsp-rename)
              ("C-c C-c q" . lsp-workspace-restart)
              ("C-c C-c Q" . lsp-workspace-shutdown)
              ("C-c C-c s" . lsp-rust-analyzer-status))
  :config
  ;; uncomment for less flashiness
  ;; (setq lsp-eldoc-hook nil)
  ;; (setq lsp-enable-symbol-highlighting nil)
  ;; (setq lsp-signature-auto-activate nil)

  ;; comment to disable rustfmt on save
;  (setq rustic-format-on-save t)
  (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

(use-package lsp-mode
  :ensure
  :commands lsp
  :custom
  ;; what to use when checking on-save. "check" is default, I prefer clippy
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-eldoc-render-all t)
  (lsp-idle-delay 0.6)
  (lsp-rust-analyzer-server-display-inlay-hints t)
  :config
  (add-hook 'lsp-mode-hook 'lsp-ui-mode))

(use-package lsp-ui
  :ensure
  :commands lsp-ui-mode
  :custom
  (lsp-ui-peek-always-show t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-doc-enable nil))


(use-package company
  :ensure
  :custom
  (company-idle-delay 0.5) ;; how long to wait until popup
  ;; (company-begin-commands nil) ;; uncomment to disable popup
  :bind
  (:map company-active-map
	      ("C-n". company-select-next)
	      ("C-p". company-select-previous)
	      ("M-<". company-select-first)
	      ("M->". company-select-last)))

(require 'cc-mode)
(define-key c-mode-map  (kbd "TAB") 'company-indent-or-complete-common)
(define-key c++-mode-map  (kbd "TAB") 'company-indent-or-complete-common)

;(define-key c-mode-map  (kbd "F1") 'company-complete-common-or-cycle)
;(define-key c++-mode-map  (kbd "F1") 'company-complete-common-or-cycle)

(global-company-mode)
